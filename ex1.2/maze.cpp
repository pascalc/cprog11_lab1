#include "maze_solver.h"         // inkludera din headerfil h�r

#include <stdio.h>
#include <iostream>

using namespace maze_solver;

int main()
{
	const char *small[] =
	{
			"#####################",
			"      # # #   # # # #",
			"##### #     # #   # #",
			"#     ##### # # #   #",
			"### # #   # #   # # #",
			"# # # # # # ####### #",
			"#   #   #   #       #",
			"## ############ #####",
			"#   #                ",
			"#####################",
			0};

	const char *medium[] =
	{
			"# #######################################",
			"# #                   #     #   #     # #",
			"# # ### ############# # # ### # # ### # #",
			"# #   #     #   #   #   #     # #   # # #",
			"# ### # ### # # # # ##### ####### # # # #",
			"#   # # # #   #   #     #   #   # # # # #",
			"### # # # # ########### ##### # ### # # #",
			"#   # #   #   # #             # #   # # #",
			"# # # ####### # # ############# # ### # #",
			"# # #     #   # #             # #   # # #",
			"# ### ### # ### ############# # ### # # #",
			"#   #   # #   #   #     #   # # #   # # #",
			"### ##### ### ### # # ### # # # # ### # #",
			"#   #     # # #     #     # # # # # #   #",
			"# ### ##### # # ############# # # # # ###",
			"#     #     # #               # # # #   #",
			"####### ##### ################### # # ###",
			"#         #   #     #             # #   #",
			"# ####### # ### # # # ############# ### #",
			"#       #       # #               #     #",
			"####################################### #",
			0};

	const char *large[] =
	{
			"# ###############################################################################",
			"# #         # #     #       #         #       #   #     #     #   #             #",
			"# ### ##### # # ### # ##### # ##### # # ### ### # # ### ##### # # # # ##### #####",
			"#   # #   # # # # #   #     # #   # #   # #   # # # # #     # # #   # #   # #   #",
			"# # # # # # # # # ### # ##### # # # ##### # # # # # # # ### # # ##### # # ### # #",
			"# #   # #     # # #   #     #   # # #   #   #   # # # # # #   #     #   # #   # #",
			"####### ####### # # ### ######### ### ####### ### # # # # # # ##### ##### # ### #",
			"#   #   #     # # # # #         #   #   #     #   # #   #   #   # #     #   #   #",
			"# # # ### ### # # # # # ####### ### ### # # ### ##### ######### # # ### ##### ###",
			"# #   #   # #   #   # # #     #   # #   # #   #     # #   #   #   # # # #   #   #",
			"# ##### ### # ####### # ##### # # # # ### ######### # ### # # ##### # # # # # ###",
			"#     #     #   #     #     # # #   #     #   #   # #   # # #       # # # # #   #",
			"# ##### # ##### # ######### # ####### ##### # ### # # # # # ######### # ### # # #",
			"#   #   # #   #     #     #   #     #     # #   # # # #   #   #       #     # # #",
			"### # ### # ####### # ### ##### ### ##### # ### # # # ######### # ########### # #",
			"#   # # #       # #   #       #   #     # # # #     # #         #   #     #   # #",
			"# ### # ####### # ##### ######### ##### ### # # ##### # ######### # # ##### # # #",
			"# #   #   #     #       #   #     #   #     # # #   # # #     #   # #   #   # # #",
			"# # ##### # ############# ### ### # # ####### # # # # # ### # # ### ### # ##### #",
			"#   #   # #             #   #   # # # #   #   #   # # # #   # #   # #   # #   # #",
			"##### # # ######### ### ### ### ### # # # # ####### # # # ##### # # # ### # # # #",
			"#   # #           #   #   #   #     #   # #   #       # # #     # # #   # # #   #",
			"# ### ########### ### # ### ### ######### # # ######### # # ##### ### # # # #####",
			"# #   #     #   # #   #   #   # #     #   # #   #     # #   # #   #   # # # #   #",
			"# # ### ### # # # # ##### ### # # ### # ####### # # # # ##### # ### # # # # # ###",
			"# # #     #   #   # #   #     # # #   #         # # # #       #   # # # # #     #",
			"# # # ### ########### # # ##### # ######### ##### # ### ######### # ### # ##### #",
			"#   #   # #       #   #   #     #         #       #     #   #     #   # # #     #",
			"####### # # ##### # ##################### ########### ### # # ####### # # # #####",
			"#     # # # #   #   #     #     #   #   # #     #   # #   # # #       # # #     #",
			"# ### # ### # ####### # # # ### ### # # # # # # # # # # ##### # # ####### #######",
			"# # #       # #       # #   #   #   # # #   # # # # # # #     # #   # #   #     #",
			"# # # ####### # ####### ##### ### ### # ##### # # # ### # ### # # # # # ### ### #",
			"#   # #     # #       # #   #   #     #   # # #   #     #   #   # #   #     # # #",
			"##### # ### # ####### ### # # ########### # # # ### ####### ####### ######### # #",
			"#   #     #         #   # # #       #   # # # # # #   #     #     #   #   #   # #",
			"# ### # ########### ### # # ####### # # # # # # # # # # ##### ### ### # # # ### #",
			"# #   # #   #   #     #   #       #   #     # # # # #   #     #   # # # #     # #",
			"# # ##### ### # ########### ############# ### # # ####### ##### ### # ### # # # #",
			"# #     #   # #     #   #   #     #     #   # # #       # #     #   #     # #   #",
			"# ### # ### # ##### # # # ### ### # ### ##### # # ##### # # ##### ######### #####",
			"#   # #   # # #     # #   #   #   #   #       # #     #   #   #   #   #     #   #",
			"### ##### # # ####### # ### ### ##### ########### ### ####### # ### # ####### # #",
			"#     #   # #       # #   # #   #   #           # #   #       #   # #       # # #",
			"### # # ### ####### # ### # # ### # ########### ### ####### ### # # ####### # # #",
			"#   # # #   #   #   #   #   #   # #   #             #     #   # # #   #   # # # #",
			"# ##### # # # # # ##### # ##### ### # ############### ### ##### # ### # # # ### #",
			"#         # # # # #     # #   # #   #         #     #   #       # #   # # #   # #",
			"# ##### ### # # # # ####### # # # ##### ##### # ##### # ######### # ### # ### # #",
			"# #   #   #   # # #     #   # # # #   # # #   #   #   # # #   #   # #   #   #   #",
			"# # # ######### # ##### # ### # # # # # # # # ### # # # # # ### # ### ##### # ###",
			"# # #   #     # #     # #   # #     # #   # #     # # # # #   # #   #     #     #",
			"### # # # ### # ##### # # # ######### ##### ####### # # # ### # ### ########### #",
			"#   # #   #   #   #   # # #         # #   #   # #   # #   # #   #       #   #   #",
			"# ##### ####### # # ### # ######### # # # ### # # ####### # # ### ####### # # ###",
			"# #   # #     # # #   # #   #   # # # # #   #   # #     # # #   #         # #   #",
			"# # # # # ### # ### # # ### # # # # # # # ### ### # ##### # # # ########### ### #",
			"#   # #   # #   #   # # # # # #   #   # # #   #   #     #   # #   #   #   #     #",
			"##### ##### # ### ### # # # # # ####### # # ### ####### ##### ### # # # #########",
			"#           #       #     #   #         # #           #         #   #           #",
			"############################################################################### #",
			0};

	// anv�nd matrisklassen f�r att l�sa matriserna ovan!
	const char** maze[] = {small, medium, large};
	for (int i = 0; i < 3; ++i) {
		MazeSolver mz;
		mz.read(maze[i]);
		mz.solve();
		mz.printPath(); 
	}
	return 0;
}